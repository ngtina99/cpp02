Ad-hoc polymorphism, operator overloading
and Orthodox Canonical class form

!!! From Module 02 to Module 09, your classes must be designed in the Orthodox
Canonical Form, except when explicitely stated otherwise. !!!
**

From now on, all your classes must be designed in the Orthodox Canonical Form,
unless explicitely stated otherwise. Then, they will implement the four required member
functions below:
• Default constructor
• Copy constructor
• Copy assignment operator
• Destructor
Split your class code into two files. The header file (.hpp/.h) contains the class
definition whereas the source file (.cpp) contains the implementation.

**


The Scope of this Module was to get to know C++ further and come in contact with classes in orthodox canonical form:

ex00: class that can store a fixed point variable
ex01: add constructors and functions to that class from ex00 to make it usable
ex02: add all kinds of operator overloads to expand the usability of ex01 even more
ex03: a use case which uses most of the previously written code by creating a function that can determine weither a point is inside a triangle or not
All of those exercises are compilable with the -std=c++98-flag, since this was a requirement for this project.
All exercises where compiled and tested on macOS Catalina 10.15.7 and Ubuntu 20.04.4 LTS.

All exercises can be compiled from the root of the exercise with make, make all or make re.
All exercises have a main function to demonstrate all the abilities of the subject.
After that, run the created executable like ./executable_to_run (ie. ex00 ./fixed).